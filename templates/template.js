(function() {
  // This file was generate from a template using t2c
 // Source file : src/templates/template.t2c 
 // ;
  var template;

  template = function(ctx) {
    var c, e, f, fields, output, v, z, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
    output = '';
    output += "// This code was generated by a tool. Please modify with caution.\n";
    output += "//\n";
    output += "\n";
    output += "using System;\n";
    output += "\n";
    output += "namespace TLS\n";
    output += "{\n";
    _ref = ctx.enums;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      z = [];
      _ref1 = e.values;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        z.push("tls_" + v.name + "=" + v.value);
      }
      output += "  public enum " + e.name + "Enum { " + (z.join(',')) + " };\n";
      output += "  public class " + e.name + "\n";
      output += "  {\n";
      output += "    public " + e.name + "Enum value;\n";
      output += "    public int num_bytes = 1;\n";
      output += "\n";
      output += "    public int Load(byte[] buffer,long offset) {\n";
      output += "      long value;\n";
      output += "      BufferTools.ReadNumberFromBuffer(buffer,offset,num_bytes,out value);\n";
      output += "      if(Enum.IsDefined(typeof(" + e.name + "Enum), value)) {\n";
      output += "        this.value = (" + e.name + "Enum)value;\n";
      output += "      }\n";
      output += "      return num_bytes;\n";
      output += "    }\n";
      output += "  }\n";
      output += "\n";
    }
    _ref2 = ctx.structs;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      c = _ref2[_k];
      fields = [];
      _ref3 = c.fields;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        f = _ref3[_l];
        fields.push("public " + f.type.name + " " + f.name + " = new " + f.type.name + "();");
      }
      output += "  public class " + c.name + "\n";
      output += "  {\n";
      for (_m = 0, _len4 = fields.length; _m < _len4; _m++) {
        f = fields[_m];
        output += "    " + f + "\n";
      }
      output += "    public long Load(byte[] buffer,long offset) {\n";
      output += "      long new_offset = offset;\n";
      _ref4 = c.fields;
      for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
        f = _ref4[_n];
        output += "      new_offset = " + f.name + ".Load(buffer,new_offset);\n";
      }
      output += "      return new_offset;\n";
      output += "    }\n";
      output += "  }\n";
    }
    return output += "}\n";
  };

  module.exports = template;

}).call(this);
